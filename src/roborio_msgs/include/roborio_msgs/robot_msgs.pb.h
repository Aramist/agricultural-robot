// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/robot_msgs.proto

#ifndef PROTOBUF_INCLUDED_proto_2frobot_5fmsgs_2eproto
#define PROTOBUF_INCLUDED_proto_2frobot_5fmsgs_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2frobot_5fmsgs_2eproto 

namespace protobuf_proto_2frobot_5fmsgs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2frobot_5fmsgs_2eproto
namespace proto {
class DifferentialDrive;
class DifferentialDriveDefaultTypeInternal;
extern DifferentialDriveDefaultTypeInternal _DifferentialDrive_default_instance_;
class EncoderPair;
class EncoderPairDefaultTypeInternal;
extern EncoderPairDefaultTypeInternal _EncoderPair_default_instance_;
class IMU;
class IMUDefaultTypeInternal;
extern IMUDefaultTypeInternal _IMU_default_instance_;
class Joy;
class JoyDefaultTypeInternal;
extern JoyDefaultTypeInternal _Joy_default_instance_;
class XYTable;
class XYTableDefaultTypeInternal;
extern XYTableDefaultTypeInternal _XYTable_default_instance_;
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::DifferentialDrive* Arena::CreateMaybeMessage<::proto::DifferentialDrive>(Arena*);
template<> ::proto::EncoderPair* Arena::CreateMaybeMessage<::proto::EncoderPair>(Arena*);
template<> ::proto::IMU* Arena::CreateMaybeMessage<::proto::IMU>(Arena*);
template<> ::proto::Joy* Arena::CreateMaybeMessage<::proto::Joy>(Arena*);
template<> ::proto::XYTable* Arena::CreateMaybeMessage<::proto::XYTable>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {

// ===================================================================

class DifferentialDrive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DifferentialDrive) */ {
 public:
  DifferentialDrive();
  virtual ~DifferentialDrive();

  DifferentialDrive(const DifferentialDrive& from);

  inline DifferentialDrive& operator=(const DifferentialDrive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DifferentialDrive(DifferentialDrive&& from) noexcept
    : DifferentialDrive() {
    *this = ::std::move(from);
  }

  inline DifferentialDrive& operator=(DifferentialDrive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DifferentialDrive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DifferentialDrive* internal_default_instance() {
    return reinterpret_cast<const DifferentialDrive*>(
               &_DifferentialDrive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DifferentialDrive* other);
  friend void swap(DifferentialDrive& a, DifferentialDrive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DifferentialDrive* New() const final {
    return CreateMaybeMessage<DifferentialDrive>(NULL);
  }

  DifferentialDrive* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DifferentialDrive>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DifferentialDrive& from);
  void MergeFrom(const DifferentialDrive& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DifferentialDrive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // double left = 1;
  void clear_left();
  static const int kLeftFieldNumber = 1;
  double left() const;
  void set_left(double value);

  // double right = 2;
  void clear_right();
  static const int kRightFieldNumber = 2;
  double right() const;
  void set_right(double value);

  // @@protoc_insertion_point(class_scope:proto.DifferentialDrive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double left_;
  double right_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2frobot_5fmsgs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EncoderPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.EncoderPair) */ {
 public:
  EncoderPair();
  virtual ~EncoderPair();

  EncoderPair(const EncoderPair& from);

  inline EncoderPair& operator=(const EncoderPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EncoderPair(EncoderPair&& from) noexcept
    : EncoderPair() {
    *this = ::std::move(from);
  }

  inline EncoderPair& operator=(EncoderPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EncoderPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncoderPair* internal_default_instance() {
    return reinterpret_cast<const EncoderPair*>(
               &_EncoderPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EncoderPair* other);
  friend void swap(EncoderPair& a, EncoderPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EncoderPair* New() const final {
    return CreateMaybeMessage<EncoderPair>(NULL);
  }

  EncoderPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EncoderPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EncoderPair& from);
  void MergeFrom(const EncoderPair& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncoderPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // sint32 left = 1;
  void clear_left();
  static const int kLeftFieldNumber = 1;
  ::google::protobuf::int32 left() const;
  void set_left(::google::protobuf::int32 value);

  // sint32 right = 2;
  void clear_right();
  static const int kRightFieldNumber = 2;
  ::google::protobuf::int32 right() const;
  void set_right(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.EncoderPair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 right_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2frobot_5fmsgs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class XYTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.XYTable) */ {
 public:
  XYTable();
  virtual ~XYTable();

  XYTable(const XYTable& from);

  inline XYTable& operator=(const XYTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XYTable(XYTable&& from) noexcept
    : XYTable() {
    *this = ::std::move(from);
  }

  inline XYTable& operator=(XYTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XYTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XYTable* internal_default_instance() {
    return reinterpret_cast<const XYTable*>(
               &_XYTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(XYTable* other);
  friend void swap(XYTable& a, XYTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XYTable* New() const final {
    return CreateMaybeMessage<XYTable>(NULL);
  }

  XYTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XYTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XYTable& from);
  void MergeFrom(const XYTable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XYTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // uint32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::uint32 y() const;
  void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.XYTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2frobot_5fmsgs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMU : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.IMU) */ {
 public:
  IMU();
  virtual ~IMU();

  IMU(const IMU& from);

  inline IMU& operator=(const IMU& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMU(IMU&& from) noexcept
    : IMU() {
    *this = ::std::move(from);
  }

  inline IMU& operator=(IMU&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMU& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMU* internal_default_instance() {
    return reinterpret_cast<const IMU*>(
               &_IMU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(IMU* other);
  friend void swap(IMU& a, IMU& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMU* New() const final {
    return CreateMaybeMessage<IMU>(NULL);
  }

  IMU* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMU>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IMU& from);
  void MergeFrom(const IMU& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMU* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 7;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // float rawAccelX = 1;
  void clear_rawaccelx();
  static const int kRawAccelXFieldNumber = 1;
  float rawaccelx() const;
  void set_rawaccelx(float value);

  // float rawAccelY = 2;
  void clear_rawaccely();
  static const int kRawAccelYFieldNumber = 2;
  float rawaccely() const;
  void set_rawaccely(float value);

  // float rawAccelZ = 3;
  void clear_rawaccelz();
  static const int kRawAccelZFieldNumber = 3;
  float rawaccelz() const;
  void set_rawaccelz(float value);

  // float rawGyroX = 4;
  void clear_rawgyrox();
  static const int kRawGyroXFieldNumber = 4;
  float rawgyrox() const;
  void set_rawgyrox(float value);

  // float rawGyroY = 5;
  void clear_rawgyroy();
  static const int kRawGyroYFieldNumber = 5;
  float rawgyroy() const;
  void set_rawgyroy(float value);

  // float rawGyroZ = 6;
  void clear_rawgyroz();
  static const int kRawGyroZFieldNumber = 6;
  float rawgyroz() const;
  void set_rawgyroz(float value);

  // @@protoc_insertion_point(class_scope:proto.IMU)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float rawaccelx_;
  float rawaccely_;
  float rawaccelz_;
  float rawgyrox_;
  float rawgyroy_;
  float rawgyroz_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2frobot_5fmsgs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Joy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Joy) */ {
 public:
  Joy();
  virtual ~Joy();

  Joy(const Joy& from);

  inline Joy& operator=(const Joy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Joy(Joy&& from) noexcept
    : Joy() {
    *this = ::std::move(from);
  }

  inline Joy& operator=(Joy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Joy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Joy* internal_default_instance() {
    return reinterpret_cast<const Joy*>(
               &_Joy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Joy* other);
  friend void swap(Joy& a, Joy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Joy* New() const final {
    return CreateMaybeMessage<Joy>(NULL);
  }

  Joy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Joy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Joy& from);
  void MergeFrom(const Joy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Joy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float axes = 1;
  int axes_size() const;
  void clear_axes();
  static const int kAxesFieldNumber = 1;
  float axes(int index) const;
  void set_axes(int index, float value);
  void add_axes(float value);
  const ::google::protobuf::RepeatedField< float >&
      axes() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_axes();

  // repeated uint32 buttons = 2;
  int buttons_size() const;
  void clear_buttons();
  static const int kButtonsFieldNumber = 2;
  ::google::protobuf::uint32 buttons(int index) const;
  void set_buttons(int index, ::google::protobuf::uint32 value);
  void add_buttons(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      buttons() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_buttons();

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto.Joy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > axes_;
  mutable int _axes_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > buttons_;
  mutable int _buttons_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2frobot_5fmsgs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DifferentialDrive

// string name = 3;
inline void DifferentialDrive::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DifferentialDrive::name() const {
  // @@protoc_insertion_point(field_get:proto.DifferentialDrive.name)
  return name_.GetNoArena();
}
inline void DifferentialDrive::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DifferentialDrive.name)
}
#if LANG_CXX11
inline void DifferentialDrive::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DifferentialDrive.name)
}
#endif
inline void DifferentialDrive::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DifferentialDrive.name)
}
inline void DifferentialDrive::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DifferentialDrive.name)
}
inline ::std::string* DifferentialDrive::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.DifferentialDrive.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DifferentialDrive::release_name() {
  // @@protoc_insertion_point(field_release:proto.DifferentialDrive.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DifferentialDrive::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.DifferentialDrive.name)
}

// double left = 1;
inline void DifferentialDrive::clear_left() {
  left_ = 0;
}
inline double DifferentialDrive::left() const {
  // @@protoc_insertion_point(field_get:proto.DifferentialDrive.left)
  return left_;
}
inline void DifferentialDrive::set_left(double value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:proto.DifferentialDrive.left)
}

// double right = 2;
inline void DifferentialDrive::clear_right() {
  right_ = 0;
}
inline double DifferentialDrive::right() const {
  // @@protoc_insertion_point(field_get:proto.DifferentialDrive.right)
  return right_;
}
inline void DifferentialDrive::set_right(double value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:proto.DifferentialDrive.right)
}

// -------------------------------------------------------------------

// EncoderPair

// string name = 3;
inline void EncoderPair::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncoderPair::name() const {
  // @@protoc_insertion_point(field_get:proto.EncoderPair.name)
  return name_.GetNoArena();
}
inline void EncoderPair::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.EncoderPair.name)
}
#if LANG_CXX11
inline void EncoderPair::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.EncoderPair.name)
}
#endif
inline void EncoderPair::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.EncoderPair.name)
}
inline void EncoderPair::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.EncoderPair.name)
}
inline ::std::string* EncoderPair::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.EncoderPair.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncoderPair::release_name() {
  // @@protoc_insertion_point(field_release:proto.EncoderPair.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncoderPair::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.EncoderPair.name)
}

// sint32 left = 1;
inline void EncoderPair::clear_left() {
  left_ = 0;
}
inline ::google::protobuf::int32 EncoderPair::left() const {
  // @@protoc_insertion_point(field_get:proto.EncoderPair.left)
  return left_;
}
inline void EncoderPair::set_left(::google::protobuf::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:proto.EncoderPair.left)
}

// sint32 right = 2;
inline void EncoderPair::clear_right() {
  right_ = 0;
}
inline ::google::protobuf::int32 EncoderPair::right() const {
  // @@protoc_insertion_point(field_get:proto.EncoderPair.right)
  return right_;
}
inline void EncoderPair::set_right(::google::protobuf::int32 value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:proto.EncoderPair.right)
}

// -------------------------------------------------------------------

// XYTable

// uint32 x = 1;
inline void XYTable::clear_x() {
  x_ = 0u;
}
inline ::google::protobuf::uint32 XYTable::x() const {
  // @@protoc_insertion_point(field_get:proto.XYTable.x)
  return x_;
}
inline void XYTable::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.XYTable.x)
}

// uint32 y = 2;
inline void XYTable::clear_y() {
  y_ = 0u;
}
inline ::google::protobuf::uint32 XYTable::y() const {
  // @@protoc_insertion_point(field_get:proto.XYTable.y)
  return y_;
}
inline void XYTable::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.XYTable.y)
}

// -------------------------------------------------------------------

// IMU

// string name = 7;
inline void IMU::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMU::name() const {
  // @@protoc_insertion_point(field_get:proto.IMU.name)
  return name_.GetNoArena();
}
inline void IMU::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.IMU.name)
}
#if LANG_CXX11
inline void IMU::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.IMU.name)
}
#endif
inline void IMU::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.IMU.name)
}
inline void IMU::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.IMU.name)
}
inline ::std::string* IMU::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.IMU.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMU::release_name() {
  // @@protoc_insertion_point(field_release:proto.IMU.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMU::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.IMU.name)
}

// float rawAccelX = 1;
inline void IMU::clear_rawaccelx() {
  rawaccelx_ = 0;
}
inline float IMU::rawaccelx() const {
  // @@protoc_insertion_point(field_get:proto.IMU.rawAccelX)
  return rawaccelx_;
}
inline void IMU::set_rawaccelx(float value) {
  
  rawaccelx_ = value;
  // @@protoc_insertion_point(field_set:proto.IMU.rawAccelX)
}

// float rawAccelY = 2;
inline void IMU::clear_rawaccely() {
  rawaccely_ = 0;
}
inline float IMU::rawaccely() const {
  // @@protoc_insertion_point(field_get:proto.IMU.rawAccelY)
  return rawaccely_;
}
inline void IMU::set_rawaccely(float value) {
  
  rawaccely_ = value;
  // @@protoc_insertion_point(field_set:proto.IMU.rawAccelY)
}

// float rawAccelZ = 3;
inline void IMU::clear_rawaccelz() {
  rawaccelz_ = 0;
}
inline float IMU::rawaccelz() const {
  // @@protoc_insertion_point(field_get:proto.IMU.rawAccelZ)
  return rawaccelz_;
}
inline void IMU::set_rawaccelz(float value) {
  
  rawaccelz_ = value;
  // @@protoc_insertion_point(field_set:proto.IMU.rawAccelZ)
}

// float rawGyroX = 4;
inline void IMU::clear_rawgyrox() {
  rawgyrox_ = 0;
}
inline float IMU::rawgyrox() const {
  // @@protoc_insertion_point(field_get:proto.IMU.rawGyroX)
  return rawgyrox_;
}
inline void IMU::set_rawgyrox(float value) {
  
  rawgyrox_ = value;
  // @@protoc_insertion_point(field_set:proto.IMU.rawGyroX)
}

// float rawGyroY = 5;
inline void IMU::clear_rawgyroy() {
  rawgyroy_ = 0;
}
inline float IMU::rawgyroy() const {
  // @@protoc_insertion_point(field_get:proto.IMU.rawGyroY)
  return rawgyroy_;
}
inline void IMU::set_rawgyroy(float value) {
  
  rawgyroy_ = value;
  // @@protoc_insertion_point(field_set:proto.IMU.rawGyroY)
}

// float rawGyroZ = 6;
inline void IMU::clear_rawgyroz() {
  rawgyroz_ = 0;
}
inline float IMU::rawgyroz() const {
  // @@protoc_insertion_point(field_get:proto.IMU.rawGyroZ)
  return rawgyroz_;
}
inline void IMU::set_rawgyroz(float value) {
  
  rawgyroz_ = value;
  // @@protoc_insertion_point(field_set:proto.IMU.rawGyroZ)
}

// -------------------------------------------------------------------

// Joy

// string name = 3;
inline void Joy::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Joy::name() const {
  // @@protoc_insertion_point(field_get:proto.Joy.name)
  return name_.GetNoArena();
}
inline void Joy::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Joy.name)
}
#if LANG_CXX11
inline void Joy::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Joy.name)
}
#endif
inline void Joy::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Joy.name)
}
inline void Joy::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Joy.name)
}
inline ::std::string* Joy::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.Joy.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Joy::release_name() {
  // @@protoc_insertion_point(field_release:proto.Joy.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Joy::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.Joy.name)
}

// repeated float axes = 1;
inline int Joy::axes_size() const {
  return axes_.size();
}
inline void Joy::clear_axes() {
  axes_.Clear();
}
inline float Joy::axes(int index) const {
  // @@protoc_insertion_point(field_get:proto.Joy.axes)
  return axes_.Get(index);
}
inline void Joy::set_axes(int index, float value) {
  axes_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Joy.axes)
}
inline void Joy::add_axes(float value) {
  axes_.Add(value);
  // @@protoc_insertion_point(field_add:proto.Joy.axes)
}
inline const ::google::protobuf::RepeatedField< float >&
Joy::axes() const {
  // @@protoc_insertion_point(field_list:proto.Joy.axes)
  return axes_;
}
inline ::google::protobuf::RepeatedField< float >*
Joy::mutable_axes() {
  // @@protoc_insertion_point(field_mutable_list:proto.Joy.axes)
  return &axes_;
}

// repeated uint32 buttons = 2;
inline int Joy::buttons_size() const {
  return buttons_.size();
}
inline void Joy::clear_buttons() {
  buttons_.Clear();
}
inline ::google::protobuf::uint32 Joy::buttons(int index) const {
  // @@protoc_insertion_point(field_get:proto.Joy.buttons)
  return buttons_.Get(index);
}
inline void Joy::set_buttons(int index, ::google::protobuf::uint32 value) {
  buttons_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Joy.buttons)
}
inline void Joy::add_buttons(::google::protobuf::uint32 value) {
  buttons_.Add(value);
  // @@protoc_insertion_point(field_add:proto.Joy.buttons)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Joy::buttons() const {
  // @@protoc_insertion_point(field_list:proto.Joy.buttons)
  return buttons_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Joy::mutable_buttons() {
  // @@protoc_insertion_point(field_mutable_list:proto.Joy.buttons)
  return &buttons_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2frobot_5fmsgs_2eproto
