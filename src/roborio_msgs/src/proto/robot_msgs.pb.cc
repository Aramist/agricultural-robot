// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agricultural-robot/src/roborio_msgs/proto/robot_msgs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "agricultural-robot/src/roborio_msgs/proto/robot_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DifferentialDrive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DifferentialDrive_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncoderPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncoderPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* XYTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XYTable_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_agricultural_2drobot_2fsrc_2froborio_5fmsgs_2fproto_2frobot_5fmsgs_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_agricultural_2drobot_2fsrc_2froborio_5fmsgs_2fproto_2frobot_5fmsgs_2eproto() {
  protobuf_AddDesc_agricultural_2drobot_2fsrc_2froborio_5fmsgs_2fproto_2frobot_5fmsgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "agricultural-robot/src/roborio_msgs/proto/robot_msgs.proto");
  GOOGLE_CHECK(file != NULL);
  DifferentialDrive_descriptor_ = file->message_type(0);
  static const int DifferentialDrive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifferentialDrive, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifferentialDrive, right_),
  };
  DifferentialDrive_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DifferentialDrive_descriptor_,
      DifferentialDrive::default_instance_,
      DifferentialDrive_offsets_,
      -1,
      -1,
      -1,
      sizeof(DifferentialDrive),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifferentialDrive, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifferentialDrive, _is_default_instance_));
  EncoderPair_descriptor_ = file->message_type(1);
  static const int EncoderPair_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncoderPair, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncoderPair, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncoderPair, right_),
  };
  EncoderPair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EncoderPair_descriptor_,
      EncoderPair::default_instance_,
      EncoderPair_offsets_,
      -1,
      -1,
      -1,
      sizeof(EncoderPair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncoderPair, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncoderPair, _is_default_instance_));
  XYTable_descriptor_ = file->message_type(2);
  static const int XYTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XYTable, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XYTable, y_),
  };
  XYTable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      XYTable_descriptor_,
      XYTable::default_instance_,
      XYTable_offsets_,
      -1,
      -1,
      -1,
      sizeof(XYTable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XYTable, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XYTable, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_agricultural_2drobot_2fsrc_2froborio_5fmsgs_2fproto_2frobot_5fmsgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DifferentialDrive_descriptor_, &DifferentialDrive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EncoderPair_descriptor_, &EncoderPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      XYTable_descriptor_, &XYTable::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_agricultural_2drobot_2fsrc_2froborio_5fmsgs_2fproto_2frobot_5fmsgs_2eproto() {
  delete DifferentialDrive::default_instance_;
  delete DifferentialDrive_reflection_;
  delete EncoderPair::default_instance_;
  delete EncoderPair_reflection_;
  delete XYTable::default_instance_;
  delete XYTable_reflection_;
}

void protobuf_AddDesc_agricultural_2drobot_2fsrc_2froborio_5fmsgs_2fproto_2frobot_5fmsgs_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_agricultural_2drobot_2fsrc_2froborio_5fmsgs_2fproto_2frobot_5fmsgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n:agricultural-robot/src/roborio_msgs/pr"
    "oto/robot_msgs.proto\"0\n\021DifferentialDriv"
    "e\022\014\n\004left\030\001 \001(\001\022\r\n\005right\030\002 \001(\001\"8\n\013Encode"
    "rPair\022\014\n\004name\030\003 \001(\t\022\014\n\004left\030\001 \001(\022\022\r\n\005rig"
    "ht\030\002 \001(\022\"\037\n\007XYTable\022\t\n\001x\030\001 \001(\004\022\t\n\001y\030\002 \001("
    "\004b\006proto3", 209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "agricultural-robot/src/roborio_msgs/proto/robot_msgs.proto", &protobuf_RegisterTypes);
  DifferentialDrive::default_instance_ = new DifferentialDrive();
  EncoderPair::default_instance_ = new EncoderPair();
  XYTable::default_instance_ = new XYTable();
  DifferentialDrive::default_instance_->InitAsDefaultInstance();
  EncoderPair::default_instance_->InitAsDefaultInstance();
  XYTable::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_agricultural_2drobot_2fsrc_2froborio_5fmsgs_2fproto_2frobot_5fmsgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_agricultural_2drobot_2fsrc_2froborio_5fmsgs_2fproto_2frobot_5fmsgs_2eproto {
  StaticDescriptorInitializer_agricultural_2drobot_2fsrc_2froborio_5fmsgs_2fproto_2frobot_5fmsgs_2eproto() {
    protobuf_AddDesc_agricultural_2drobot_2fsrc_2froborio_5fmsgs_2fproto_2frobot_5fmsgs_2eproto();
  }
} static_descriptor_initializer_agricultural_2drobot_2fsrc_2froborio_5fmsgs_2fproto_2frobot_5fmsgs_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DifferentialDrive::kLeftFieldNumber;
const int DifferentialDrive::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DifferentialDrive::DifferentialDrive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DifferentialDrive)
}

void DifferentialDrive::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DifferentialDrive::DifferentialDrive(const DifferentialDrive& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DifferentialDrive)
}

void DifferentialDrive::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
}

DifferentialDrive::~DifferentialDrive() {
  // @@protoc_insertion_point(destructor:DifferentialDrive)
  SharedDtor();
}

void DifferentialDrive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DifferentialDrive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DifferentialDrive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DifferentialDrive_descriptor_;
}

const DifferentialDrive& DifferentialDrive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agricultural_2drobot_2fsrc_2froborio_5fmsgs_2fproto_2frobot_5fmsgs_2eproto();
  return *default_instance_;
}

DifferentialDrive* DifferentialDrive::default_instance_ = NULL;

DifferentialDrive* DifferentialDrive::New(::google::protobuf::Arena* arena) const {
  DifferentialDrive* n = new DifferentialDrive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DifferentialDrive::Clear() {
// @@protoc_insertion_point(message_clear_start:DifferentialDrive)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DifferentialDrive, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DifferentialDrive*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(left_, right_);

#undef ZR_HELPER_
#undef ZR_

}

bool DifferentialDrive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DifferentialDrive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double left = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_right;
        break;
      }

      // optional double right = 2;
      case 2: {
        if (tag == 17) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DifferentialDrive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DifferentialDrive)
  return false;
#undef DO_
}

void DifferentialDrive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DifferentialDrive)
  // optional double left = 1;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->left(), output);
  }

  // optional double right = 2;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->right(), output);
  }

  // @@protoc_insertion_point(serialize_end:DifferentialDrive)
}

::google::protobuf::uint8* DifferentialDrive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DifferentialDrive)
  // optional double left = 1;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->left(), target);
  }

  // optional double right = 2;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->right(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DifferentialDrive)
  return target;
}

int DifferentialDrive::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DifferentialDrive)
  int total_size = 0;

  // optional double left = 1;
  if (this->left() != 0) {
    total_size += 1 + 8;
  }

  // optional double right = 2;
  if (this->right() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DifferentialDrive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DifferentialDrive)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DifferentialDrive* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DifferentialDrive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DifferentialDrive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DifferentialDrive)
    MergeFrom(*source);
  }
}

void DifferentialDrive::MergeFrom(const DifferentialDrive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DifferentialDrive)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
}

void DifferentialDrive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DifferentialDrive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DifferentialDrive::CopyFrom(const DifferentialDrive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DifferentialDrive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DifferentialDrive::IsInitialized() const {

  return true;
}

void DifferentialDrive::Swap(DifferentialDrive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DifferentialDrive::InternalSwap(DifferentialDrive* other) {
  std::swap(left_, other->left_);
  std::swap(right_, other->right_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DifferentialDrive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DifferentialDrive_descriptor_;
  metadata.reflection = DifferentialDrive_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DifferentialDrive

// optional double left = 1;
void DifferentialDrive::clear_left() {
  left_ = 0;
}
 double DifferentialDrive::left() const {
  // @@protoc_insertion_point(field_get:DifferentialDrive.left)
  return left_;
}
 void DifferentialDrive::set_left(double value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:DifferentialDrive.left)
}

// optional double right = 2;
void DifferentialDrive::clear_right() {
  right_ = 0;
}
 double DifferentialDrive::right() const {
  // @@protoc_insertion_point(field_get:DifferentialDrive.right)
  return right_;
}
 void DifferentialDrive::set_right(double value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:DifferentialDrive.right)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncoderPair::kNameFieldNumber;
const int EncoderPair::kLeftFieldNumber;
const int EncoderPair::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncoderPair::EncoderPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EncoderPair)
}

void EncoderPair::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EncoderPair::EncoderPair(const EncoderPair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EncoderPair)
}

void EncoderPair::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_ = GOOGLE_LONGLONG(0);
  right_ = GOOGLE_LONGLONG(0);
}

EncoderPair::~EncoderPair() {
  // @@protoc_insertion_point(destructor:EncoderPair)
  SharedDtor();
}

void EncoderPair::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EncoderPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncoderPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncoderPair_descriptor_;
}

const EncoderPair& EncoderPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agricultural_2drobot_2fsrc_2froborio_5fmsgs_2fproto_2frobot_5fmsgs_2eproto();
  return *default_instance_;
}

EncoderPair* EncoderPair::default_instance_ = NULL;

EncoderPair* EncoderPair::New(::google::protobuf::Arena* arena) const {
  EncoderPair* n = new EncoderPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EncoderPair::Clear() {
// @@protoc_insertion_point(message_clear_start:EncoderPair)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EncoderPair, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EncoderPair*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(left_, right_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool EncoderPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EncoderPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 left = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &left_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_right;
        break;
      }

      // optional sint64 right = 2;
      case 2: {
        if (tag == 16) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &right_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EncoderPair.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EncoderPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EncoderPair)
  return false;
#undef DO_
}

void EncoderPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EncoderPair)
  // optional sint64 left = 1;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->left(), output);
  }

  // optional sint64 right = 2;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->right(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EncoderPair.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:EncoderPair)
}

::google::protobuf::uint8* EncoderPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EncoderPair)
  // optional sint64 left = 1;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->left(), target);
  }

  // optional sint64 right = 2;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->right(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EncoderPair.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:EncoderPair)
  return target;
}

int EncoderPair::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:EncoderPair)
  int total_size = 0;

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional sint64 left = 1;
  if (this->left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->left());
  }

  // optional sint64 right = 2;
  if (this->right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->right());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncoderPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EncoderPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EncoderPair* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EncoderPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EncoderPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EncoderPair)
    MergeFrom(*source);
  }
}

void EncoderPair::MergeFrom(const EncoderPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EncoderPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
}

void EncoderPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EncoderPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncoderPair::CopyFrom(const EncoderPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EncoderPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncoderPair::IsInitialized() const {

  return true;
}

void EncoderPair::Swap(EncoderPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncoderPair::InternalSwap(EncoderPair* other) {
  name_.Swap(&other->name_);
  std::swap(left_, other->left_);
  std::swap(right_, other->right_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EncoderPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncoderPair_descriptor_;
  metadata.reflection = EncoderPair_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EncoderPair

// optional string name = 3;
void EncoderPair::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EncoderPair::name() const {
  // @@protoc_insertion_point(field_get:EncoderPair.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EncoderPair::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EncoderPair.name)
}
 void EncoderPair::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EncoderPair.name)
}
 void EncoderPair::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EncoderPair.name)
}
 ::std::string* EncoderPair::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:EncoderPair.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EncoderPair::release_name() {
  // @@protoc_insertion_point(field_release:EncoderPair.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EncoderPair::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:EncoderPair.name)
}

// optional sint64 left = 1;
void EncoderPair::clear_left() {
  left_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 EncoderPair::left() const {
  // @@protoc_insertion_point(field_get:EncoderPair.left)
  return left_;
}
 void EncoderPair::set_left(::google::protobuf::int64 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:EncoderPair.left)
}

// optional sint64 right = 2;
void EncoderPair::clear_right() {
  right_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 EncoderPair::right() const {
  // @@protoc_insertion_point(field_get:EncoderPair.right)
  return right_;
}
 void EncoderPair::set_right(::google::protobuf::int64 value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:EncoderPair.right)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XYTable::kXFieldNumber;
const int XYTable::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XYTable::XYTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XYTable)
}

void XYTable::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

XYTable::XYTable(const XYTable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XYTable)
}

void XYTable::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = GOOGLE_ULONGLONG(0);
  y_ = GOOGLE_ULONGLONG(0);
}

XYTable::~XYTable() {
  // @@protoc_insertion_point(destructor:XYTable)
  SharedDtor();
}

void XYTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XYTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XYTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XYTable_descriptor_;
}

const XYTable& XYTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agricultural_2drobot_2fsrc_2froborio_5fmsgs_2fproto_2frobot_5fmsgs_2eproto();
  return *default_instance_;
}

XYTable* XYTable::default_instance_ = NULL;

XYTable* XYTable::New(::google::protobuf::Arena* arena) const {
  XYTable* n = new XYTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XYTable::Clear() {
// @@protoc_insertion_point(message_clear_start:XYTable)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(XYTable, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<XYTable*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool XYTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XYTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint64 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XYTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XYTable)
  return false;
#undef DO_
}

void XYTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XYTable)
  // optional uint64 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->x(), output);
  }

  // optional uint64 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:XYTable)
}

::google::protobuf::uint8* XYTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XYTable)
  // optional uint64 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->x(), target);
  }

  // optional uint64 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:XYTable)
  return target;
}

int XYTable::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:XYTable)
  int total_size = 0;

  // optional uint64 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->x());
  }

  // optional uint64 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->y());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XYTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XYTable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const XYTable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const XYTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XYTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XYTable)
    MergeFrom(*source);
  }
}

void XYTable::MergeFrom(const XYTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XYTable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void XYTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XYTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XYTable::CopyFrom(const XYTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XYTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XYTable::IsInitialized() const {

  return true;
}

void XYTable::Swap(XYTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XYTable::InternalSwap(XYTable* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XYTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XYTable_descriptor_;
  metadata.reflection = XYTable_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// XYTable

// optional uint64 x = 1;
void XYTable::clear_x() {
  x_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 XYTable::x() const {
  // @@protoc_insertion_point(field_get:XYTable.x)
  return x_;
}
 void XYTable::set_x(::google::protobuf::uint64 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:XYTable.x)
}

// optional uint64 y = 2;
void XYTable::clear_y() {
  y_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 XYTable::y() const {
  // @@protoc_insertion_point(field_get:XYTable.y)
  return y_;
}
 void XYTable::set_y(::google::protobuf::uint64 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:XYTable.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
